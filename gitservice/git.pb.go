// Code generated by protoc-gen-go.
// source: git.proto
// DO NOT EDIT!

/*
Package gitservice is a generated protocol buffer package.

It is generated from these files:
	git.proto

It has these top-level messages:
	Change
	GitError
	SaveRequest
	RemoveRequest
	RenameRequest
	CommitResponse
	ChangesRequest
*/
package gitservice

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type Change_Op int32

const (
	Change_OpNone   Change_Op = 0
	Change_OpAdd    Change_Op = 1
	Change_OpUpdate Change_Op = 2
	Change_OpRename Change_Op = 3
)

var Change_Op_name = map[int32]string{
	0: "OpNone",
	1: "OpAdd",
	2: "OpUpdate",
	3: "OpRename",
}
var Change_Op_value = map[string]int32{
	"OpNone":   0,
	"OpAdd":    1,
	"OpUpdate": 2,
	"OpRename": 3,
}

func (x Change_Op) String() string {
	return proto.EnumName(Change_Op_name, int32(x))
}

type Change struct {
	Op    Change_Op `protobuf:"varint,1,opt,name=op,enum=gitservice.Change_Op" json:"op,omitempty"`
	Name  string    `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email string    `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Msg   string    `protobuf:"bytes,4,opt,name=msg" json:"msg,omitempty"`
}

func (m *Change) Reset()         { *m = Change{} }
func (m *Change) String() string { return proto.CompactTextString(m) }
func (*Change) ProtoMessage()    {}

type GitError struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *GitError) Reset()         { *m = GitError{} }
func (m *GitError) String() string { return proto.CompactTextString(m) }
func (*GitError) ProtoMessage()    {}

type SaveRequest struct {
	Path  string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Msg   string `protobuf:"bytes,4,opt,name=msg" json:"msg,omitempty"`
}

func (m *SaveRequest) Reset()         { *m = SaveRequest{} }
func (m *SaveRequest) String() string { return proto.CompactTextString(m) }
func (*SaveRequest) ProtoMessage()    {}

type RemoveRequest struct {
	Path  string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Msg   string `protobuf:"bytes,4,opt,name=msg" json:"msg,omitempty"`
}

func (m *RemoveRequest) Reset()         { *m = RemoveRequest{} }
func (m *RemoveRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveRequest) ProtoMessage()    {}

type RenameRequest struct {
	Src   string `protobuf:"bytes,1,opt,name=src" json:"src,omitempty"`
	Dst   string `protobuf:"bytes,2,opt,name=dst" json:"dst,omitempty"`
	Name  string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Email string `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	Msg   string `protobuf:"bytes,5,opt,name=msg" json:"msg,omitempty"`
}

func (m *RenameRequest) Reset()         { *m = RenameRequest{} }
func (m *RenameRequest) String() string { return proto.CompactTextString(m) }
func (*RenameRequest) ProtoMessage()    {}

type CommitResponse struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Msg   string `protobuf:"bytes,4,opt,name=msg" json:"msg,omitempty"`
}

func (m *CommitResponse) Reset()         { *m = CommitResponse{} }
func (m *CommitResponse) String() string { return proto.CompactTextString(m) }
func (*CommitResponse) ProtoMessage()    {}

type ChangesRequest struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *ChangesRequest) Reset()         { *m = ChangesRequest{} }
func (m *ChangesRequest) String() string { return proto.CompactTextString(m) }
func (*ChangesRequest) ProtoMessage()    {}

func init() {
	proto.RegisterEnum("gitservice.Change_Op", Change_Op_name, Change_Op_value)
}

// Client API for Git service

type GitClient interface {
	Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*CommitResponse, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*CommitResponse, error)
	Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*CommitResponse, error)
	Changes(ctx context.Context, in *ChangesRequest, opts ...grpc.CallOption) (Git_ChangesClient, error)
}

type gitClient struct {
	cc *grpc.ClientConn
}

func NewGitClient(cc *grpc.ClientConn) GitClient {
	return &gitClient{cc}
}

func (c *gitClient) Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	out := new(CommitResponse)
	err := grpc.Invoke(ctx, "/gitservice.Git/Save", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	out := new(CommitResponse)
	err := grpc.Invoke(ctx, "/gitservice.Git/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitClient) Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	out := new(CommitResponse)
	err := grpc.Invoke(ctx, "/gitservice.Git/Rename", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitClient) Changes(ctx context.Context, in *ChangesRequest, opts ...grpc.CallOption) (Git_ChangesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Git_serviceDesc.Streams[0], c.cc, "/gitservice.Git/Changes", opts...)
	if err != nil {
		return nil, err
	}
	x := &gitChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Git_ChangesClient interface {
	Recv() (*Change, error)
	grpc.ClientStream
}

type gitChangesClient struct {
	grpc.ClientStream
}

func (x *gitChangesClient) Recv() (*Change, error) {
	m := new(Change)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Git service

type GitServer interface {
	Save(context.Context, *SaveRequest) (*CommitResponse, error)
	Remove(context.Context, *RemoveRequest) (*CommitResponse, error)
	Rename(context.Context, *RenameRequest) (*CommitResponse, error)
	Changes(*ChangesRequest, Git_ChangesServer) error
}

func RegisterGitServer(s *grpc.Server, srv GitServer) {
	s.RegisterService(&_Git_serviceDesc, srv)
}

func _Git_Save_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(SaveRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GitServer).Save(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Git_Remove_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RemoveRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GitServer).Remove(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Git_Rename_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RenameRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GitServer).Rename(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Git_Changes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChangesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GitServer).Changes(m, &gitChangesServer{stream})
}

type Git_ChangesServer interface {
	Send(*Change) error
	grpc.ServerStream
}

type gitChangesServer struct {
	grpc.ServerStream
}

func (x *gitChangesServer) Send(m *Change) error {
	return x.ServerStream.SendMsg(m)
}

var _Git_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gitservice.Git",
	HandlerType: (*GitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _Git_Save_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Git_Remove_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _Git_Rename_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Changes",
			Handler:       _Git_Changes_Handler,
			ServerStreams: true,
		},
	},
}
